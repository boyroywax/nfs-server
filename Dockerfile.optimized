# Generic Modular NFS Server for Kubernetes - Alpine Linux (Highly Optimized)
# A lightweight, configurable NFS server for containerized environments
# HIGHLY OPTIMIZED VERSION: Builds nfs-utils from source without Python dependency

# Build arguments for supply chain attestation
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.1-optimized

# Stage 1: Builder
FROM alpine:3.22 AS builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    libtirpc-dev \
    krb5-dev \
    libevent-dev \
    sqlite-dev \
    device-mapper-dev \
    keyutils-dev \
    autoconf \
    automake \
    libtool \
    linux-headers

# Download and build nfs-utils without Python
WORKDIR /build
RUN wget https://www.kernel.org/pub/linux/utils/nfs-utils/2.6.4/nfs-utils-2.6.4.tar.xz && \
    tar xf nfs-utils-2.6.4.tar.xz && \
    cd nfs-utils-2.6.4 && \
    ./configure \
        --prefix=/usr \
        --sysconfdir=/etc \
        --mandir=/usr/share/man \
        --infodir=/usr/share/info \
        --localstatedir=/var \
        --disable-nfsv4 \
        --disable-gss \
        --without-tcp-wrappers \
        --disable-static && \
    make && \
    make DESTDIR=/build/rootfs install

# Stage 2: Runtime (Minimal)
FROM alpine:3.22

# Enhanced metadata for supply chain attestation
LABEL maintainer="contact@pocketlabs.cc" \
      description="Highly optimized lightweight NFS server for Kubernetes" \
      version="${VERSION}" \
      org.opencontainers.image.title="Generic NFS Server (Optimized)" \
      org.opencontainers.image.description="Highly optimized lightweight NFS server for Kubernetes" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.authors="contact@pocketlabs.cc" \
      org.opencontainers.image.vendor="Pocket Labs" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/boyroywax/nfs-server" \
      org.opencontainers.image.documentation="https://github.com/boyroywax/nfs-server/blob/main/README.md" \
      org.opencontainers.image.url="https://hub.docker.com/r/boyroywax/nfs-server" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}"

# Security: Install only runtime dependencies (no Python!)
RUN apk update && apk upgrade && \
    apk add --no-cache \
    'openssl>=3.5.4-r0' \
    'expat>=2.7.2-r0' \
    rpcbind \
    libtirpc \
    krb5-libs \
    libevent \
    sqlite-libs \
    device-mapper-libs \
    keyutils-libs \
    mount \
    umount \
    blkid \
    findmnt \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# Copy built nfs-utils from builder
COPY --from=builder /build/rootfs /

# Security: Create dedicated non-root user and group for NFS operations
RUN addgroup -g 1001 -S nfsgroup && \
    adduser -D -u 1001 -G nfsgroup -s /bin/sh -h /home/nfsuser nfsuser

# Create necessary directories for NFS serving with proper ownership
RUN mkdir -p /nfsshare/data \
             /var/lib/nfs \
             /var/lib/nfs/statd \
             /var/lib/nfs/v4recovery \
             /run/rpc_pipefs \
             /etc/exports.d \
             /home/nfsuser \
             && chown -R nfsuser:nfsgroup /nfsshare/data \
             && chown -R nfsuser:nfsgroup /home/nfsuser \
             && chmod 755 /nfsshare/data \
             && chmod 750 /home/nfsuser

# Create dynamic exports configuration script (POSIX compliant)
RUN cat > /usr/local/bin/configure-exports.sh << 'EOF'
#!/bin/sh
set -e

# Configuration with sensible defaults
SHARE_NAME=${SHARE_NAME:-"default-share"}
EXPORT_PATH=${EXPORT_PATH:-"/nfsshare/data"}
NFS_OPTIONS=${NFS_OPTIONS:-"rw,sync,no_subtree_check,no_root_squash,insecure"}
CLIENT_CIDR=${CLIENT_CIDR:-"*"}

echo "=== NFS Server Configuration ==="
echo "Share Name: ${SHARE_NAME}"
echo "Export Path: ${EXPORT_PATH}"
echo "Client CIDR: ${CLIENT_CIDR}"
echo "NFS Options: ${NFS_OPTIONS}"
echo "================================"

# Ensure export directory exists
mkdir -p "${EXPORT_PATH}"
chown -R nfsuser:nfsgroup "${EXPORT_PATH}"

# Create exports file
echo "# NFS exports for ${SHARE_NAME}" > /etc/exports

# Split CLIENT_CIDR by comma
echo "$CLIENT_CIDR" | tr ',' '\n' | while IFS= read -r cidr; do
    cidr=$(echo "$cidr" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    if [ -n "$cidr" ]; then
        echo "${EXPORT_PATH} ${cidr}(${NFS_OPTIONS})" >> /etc/exports
    fi
done

echo "Active NFS Exports:"
cat /etc/exports
echo ""
EOF

RUN chmod +x /usr/local/bin/configure-exports.sh

# Create startup script (POSIX compliant)
RUN cat > /usr/local/bin/start-nfs.sh << 'EOF'
#!/bin/sh
set -e

if [ "$(id -u)" != "0" ]; then
    echo "ERROR: NFS server requires root privileges"
    exit 1
fi

SHARE_NAME=${SHARE_NAME:-"default-share"}
echo "Starting NFS server for share: ${SHARE_NAME}"
echo ""

/usr/local/bin/configure-exports.sh

mkdir -p /nfsshare/data
chown -R nfsuser:nfsgroup /nfsshare/data

echo "Starting rpcbind service..."
rpcbind -w -f &
RPCBIND_PID=$!

sleep 2

echo "Starting NFS state daemon..."
rpc.statd --no-notify &
STATD_PID=$!

echo "Starting NFS mount daemon..."
rpc.mountd --port 20048 &
MOUNTD_PID=$!

echo "Activating NFS exports..."
exportfs -ra

echo "Starting NFS kernel daemon..."
rpc.nfsd -V 3 8

shutdown() {
    echo ""
    echo "Received shutdown signal, stopping NFS server..."
    exportfs -ua 2>/dev/null || true
    rpc.nfsd 0 2>/dev/null || true
    kill $MOUNTD_PID $STATD_PID $RPCBIND_PID 2>/dev/null || true
    exit 0
}

trap shutdown TERM INT

echo ""
echo "‚úÖ NFS server started successfully!"
echo "üìÅ Export path: ${EXPORT_PATH}"

while true; do
    sleep 30
    if ! showmount -e localhost > /dev/null 2>&1; then
        echo "‚ùå Health check failed"
        exit 1
    fi
done
EOF

RUN chmod +x /usr/local/bin/start-nfs.sh

# Cleanup
RUN rm -rf /var/cache/apk/* /tmp/* /root/.cache && \
    find /var/log -type f -delete

WORKDIR /home/nfsuser
USER nfsuser

EXPOSE 2049/tcp 20048/tcp 111/tcp 111/udp

HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD showmount -e localhost | grep -q "/nfsshare/data" || exit 1

ENV SHARE_NAME=default-share \
    EXPORT_PATH=/nfsshare/data \
    NFS_OPTIONS=rw,sync,no_subtree_check,no_root_squash,insecure \
    CLIENT_CIDR=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16

ENTRYPOINT ["/usr/local/bin/start-nfs.sh"]
